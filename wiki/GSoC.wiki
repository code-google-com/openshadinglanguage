= Info page for Google Summer of Code =

----

== Ideas for projects to work on ==

All projects presume fluency and experience with C++.

These are just a few ideas of summer projects involving OSL.  Your choices are not limited to these, they are just samples.  Feel free to make up your own project for consideration, or check our [http://code.google.com/p/openshadinglanguage/issues/list issues" list] for more ideas.

====Shader profiling====

Make a special run mode that tells you which shaders (and which lines of those shaders) are most expensive.


====A prototype shader debugger====

This would involve building infrastructure (and a prototype tool) that would let you step through shaders a line at a time, examining individual variables, setting watchpoints, etc.


====Translation of OSL to or from other interesting shading languages.====

There are many shading languages in the world.  Among popular ones are RenderMan shading language (RSL), hardware shading language such as GLSL/HLSL/Cg, and many others.  One interesting project could be a program that translates other strategic shading languages into OSL source (or oso bytecode), as an aid to people converting their shader libraries from other languages.

Requirements: some compiler development interest and skills.

====Writing example shaders for all sorts of useful materials====

Our library of actual example shaders is quite anemic.  It would be great to have a collection of example shaders for useful materials.

Warning: we know that this is an easy-sounding project, so we intend to really scrutinize any applications that involve just writing shaders.  Your application should have a list of specific shaders you think would be helpful, be prepared to defend why your particular choices are important, and have a plan for how to achieve the goal.

Requirements: shader-writing skills.

====New BSDF closures====

There are countless published papers describing BSDFs that we have not yet implemented.  Choosing a few of the most useful ones and implementing them very well would be a great summer project.

Requirements: deep understanding of computer graphics, radiometry, understanding of sampling and probability.  This project is not for the mathematically unsophisticated!

====Better test program====

Our "testshade" (which is totally lame, just shades a flat square, with no lights.  An alternate test program that shades a sphere on a plane, with a light, and working integrator code (ours is on the Arnold side, not on the OSL side) would be immensely helpful and also provide a better example of how to integrate OSL into renderers.  Basically this would be like writing a mini-renderer

Requirements: knowledge of computer graphics and renderers, Monte Carlo integration techniques, and great skills at writing especially clean and explanatory code.

====Translation of compiled OSL to "close as possible" code in any hardware-oriented language (GLSL, Cg, Cuda, OpenCL, etc.)====

Runtime on-the-fly translation of our compiled bytcodes to interesting realtime hardware language(s) such as GLSL, Cuda, etc.  We realize that full functionality of OSL is not likely to work, but an "as close as possible" solution would still be very helpful.  For example, translating to GLSL with direct lighting only, would be great.

Requirements: knowledge of the target language, compiler/translation skills

====Translation of our bytecode into LLVM intermediate code====

We're looking into LLVM seriously for future OSL development possibilities.  A first step in this direciton would be correct translation of our bytecode into LLVM intermediate code.  From there, several possibilities are evident: using LLVM to optimize the code, then translate back into oso bytecode for our usual execution (but with better optimization); translation all the way to x86 code; etc.

Requirements: LLVM skills, knowledge of compilers