shader
test ()
{
    printf ("Test derivatives\n\n");

    printf ("u = %g, Dx(u) = %g, Dy(u) = %g\n", u, Dx(u), Dy(u));
    printf ("v = %g, Dx(v) = %g, Dy(v) = %g\n", v, Dx(v), Dy(v));
    printf ("P = %g, Dx(P) = %g, Dy(P) = %g\n", P, Dx(P), Dy(P));
    
    {
        float a = u;
        printf ("\n");
        printf ("Assign: a = u; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = u+v;
        printf ("\n");
        printf ("Add: a = u+v; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
        a = u+0.5;
        printf ("Add constant: a = u+0.5; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = u-v;
        printf ("\n");
        printf ("Sub: a = u-v; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
        a = u-0.5;
        printf ("Sub constant: a = u-0.5; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = -u;
        printf ("\n");
        printf ("Negate: a = -u; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = u*v;
        printf ("\n");
        printf ("Mul: a = u*v; a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = u/(v+1);
        printf ("\n");
        printf ("Div: a = u/(v+1); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = cos(u);
        printf ("\n");
        printf ("cos: a = cos(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = sin(u);
        printf ("\n");
        printf ("sin: a = sin(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = tan(u);
        printf ("\n");
        printf ("tan: a = tan(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = cosh(u);
        printf ("\n");
        printf ("cosh: a = cosh(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = sinh(u);
        printf ("\n");
        printf ("sinh: a = sinh(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = tanh(u);
        printf ("\n");
        printf ("tanh: a = tanh(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = acos(u);
        printf ("\n");
        printf ("acos: a = acos(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = asin(u);
        printf ("\n");
        printf ("asin: a = asin(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = atan(u);
        printf ("\n");
        printf ("atan: a = atan(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = degrees(u);
        printf ("\n");
        printf ("degrees: a = degrees(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        float a = radians(u);
        printf ("\n");
        printf ("radians: a = radians(u); a = %g, Dx(a) = %g, Dy(a) = %g\n",
                a, Dx(a), Dy(a));
    }

    {
        // Test component reference
        float a = P[0], b = P[1];
        printf ("\n");
        printf ("comp ref: P = %g, Dx(P) = %g, Dy(P) = %g\n", P, Dx(P), Dy(P));
        printf ("  P[0] = %g, Dx(P[0]) = %g, Dy(P[0]) = %g\n",
                a, Dx(a), Dy(a));
        printf ("  P[1] = %g, Dx(P[1]) = %g, Dy(P[1]) = %g\n",
                b, Dx(b), Dy(b));
    }

    {
        // Test component reference
        color C = 0;
        C[0] = u;
        C[1] = v;
        printf ("\n");
        printf ("comp assign: C[0]=u, C[1]=v: now C = %g, Dx(C) = %g, Dy(C) = %g\n", C, Dx(C), Dy(C));
    }

    {
        // Test triple construction
        color C = color (u, v, 0);
        printf ("\nTriple construction:\n");
        printf ("  color(u,v,0) = %g, Dx = %g, Dy = %g\n", C, Dx(C), Dy(C));
        point p;
        p = point (u,v,0);
        printf ("  point (%g,%g,0) = %g, Dx = %g, Dy = %g\n",
                u, v, p, Dx(p), Dy(p));
        p = point ("shader",u,v,0);
        printf ("  point (\"shader\",%g,%g,0) = %g, Dx = %g, Dy = %g\n",
                u, v, p, Dx(p), Dy(p));
        vector V = vector ("shader",u,v,0);
        printf ("  vector (\"shader\",%g,%g,0) = %g, Dx = %g, Dy = %g\n",
                u, v, V, Dx(V), Dy(V));
    }
}
